{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Execution JSON\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nThe \nsiddhi-execution-json extension\n is a \nSiddhi\n extension that provides capability to retrieve, insert, and modify JSON elements.\n\n\nFor information on \nSiddhi\n and it's features refer \nSiddhi Documentation\n. \n\n\nDownload\n\n\n\n\nVersions 2.x and above with group id \nio.siddhi.extension.*\n from \nhere\n.\n\n\nVersions 1.x and lower with group id \norg.wso2.extension.siddhi.*\n from \nhere\n.\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n2.0.2\n.\n\n\nFeatures\n\n\n\n\ngetBool\n \n(\nFunction\n)\n \nFunction retrieves the 'boolean' value specified in the given path of the JSON element.\n\n\ngetDouble\n \n(\nFunction\n)\n \nFunction retrieves the 'double' value specified in the given path of the JSON element.\n\n\ngetFloat\n \n(\nFunction\n)\n \nFunction retrieves the 'float' value specified in the given path of the JSON element.\n\n\ngetInt\n \n(\nFunction\n)\n \nFunction retrieves the 'int' value specified in the given path of the JSON element.\n\n\ngetLong\n \n(\nFunction\n)\n \nFunction retrieves the 'long' value specified in the given path of the JSON element.\n\n\ngetObject\n \n(\nFunction\n)\n \nFunction retrieves the object specified in the given path of the JSON element.\n\n\ngetString\n \n(\nFunction\n)\n \nFunction retrieves value specified in the given path of the JSON element as a string.\n\n\nisExists\n \n(\nFunction\n)\n \nFunction checks whether there is a JSON element present in the given path or not.\n\n\nsetElement\n \n(\nFunction\n)\n \nFunction sets JSON element into a given JSON at the specific path.\n\n\ntoObject\n \n(\nFunction\n)\n \nFunction generate JSON object from the given JSON string.\n\n\ntoString\n \n(\nFunction\n)\n \nFunction generates a JSON string corresponding to a given JSON object.\n\n\ntokenize\n \n(\nStream Processor\n)\n \nStream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.\n\n\ntokenizeAsObject\n \n(\nStream Processor\n)\n \nStream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.\n\n\n\n\nDependencies\n\n\nThere are no other dependencies needed for this extension. \n\n\nInstallation\n\n\nFor installing this extension on various siddhi execution environments refer Siddhi documentation section on \nadding extensions\n.\n\n\nSupport and Contribution\n\n\n\n\n\n\nWe encourage users to ask questions and get support via \nStackOverflow\n, make sure to add the \nsiddhi\n tag to the issue for better response.\n\n\n\n\n\n\nIf you find any issues related to the extension please report them on \nthe issue tracker\n.\n\n\n\n\n\n\nFor production support and other contribution related information refer \nSiddhi Community\n documentation.", 
            "title": "Information"
        }, 
        {
            "location": "/#siddhi-execution-json", 
            "text": "The  siddhi-execution-json extension  is a  Siddhi  extension that provides capability to retrieve, insert, and modify JSON elements.  For information on  Siddhi  and it's features refer  Siddhi Documentation .", 
            "title": "Siddhi Execution JSON"
        }, 
        {
            "location": "/#download", 
            "text": "Versions 2.x and above with group id  io.siddhi.extension.*  from  here .  Versions 1.x and lower with group id  org.wso2.extension.siddhi.*  from  here .", 
            "title": "Download"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  2.0.2 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#features", 
            "text": "getBool   ( Function )   Function retrieves the 'boolean' value specified in the given path of the JSON element.  getDouble   ( Function )   Function retrieves the 'double' value specified in the given path of the JSON element.  getFloat   ( Function )   Function retrieves the 'float' value specified in the given path of the JSON element.  getInt   ( Function )   Function retrieves the 'int' value specified in the given path of the JSON element.  getLong   ( Function )   Function retrieves the 'long' value specified in the given path of the JSON element.  getObject   ( Function )   Function retrieves the object specified in the given path of the JSON element.  getString   ( Function )   Function retrieves value specified in the given path of the JSON element as a string.  isExists   ( Function )   Function checks whether there is a JSON element present in the given path or not.  setElement   ( Function )   Function sets JSON element into a given JSON at the specific path.  toObject   ( Function )   Function generate JSON object from the given JSON string.  toString   ( Function )   Function generates a JSON string corresponding to a given JSON object.  tokenize   ( Stream Processor )   Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.  tokenizeAsObject   ( Stream Processor )   Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.", 
            "title": "Features"
        }, 
        {
            "location": "/#dependencies", 
            "text": "There are no other dependencies needed for this extension.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#installation", 
            "text": "For installing this extension on various siddhi execution environments refer Siddhi documentation section on  adding extensions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#support-and-contribution", 
            "text": "We encourage users to ask questions and get support via  StackOverflow , make sure to add the  siddhi  tag to the issue for better response.    If you find any issues related to the extension please report them on  the issue tracker .    For production support and other contribution related information refer  Siddhi Community  documentation.", 
            "title": "Support and Contribution"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v2.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nFunction retrieves the 'boolean' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing boolean value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the boolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getBool(json,'$.married')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \ntrue\n as there is a matching boolean at \n$.married\n.\n\n\n\nEXAMPLE 2\n\n\njson:getBool(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \nnull\n as there is no matching boolean at \n$.name\n.\n\n\n\nEXAMPLE 3\n\n\njson:getBool(json,'$.foo')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \nnull\n as there is no matching element at \n$.foo\n.\n\n\n\ngetDouble \n(Function)\n\n\nFunction retrieves the 'double' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing double value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getDouble(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'salary' : 12000.0}\n, the function returns \n12000.0\n as there is a matching double at \n$.salary\n.\n\n\n\nEXAMPLE 2\n\n\njson:getDouble(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getDouble(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching double at \n$.name\n.\n\n\n\ngetFloat \n(Function)\n\n\nFunction retrieves the 'float' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing float value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getFloat(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'salary' : 12000.0}\n, the function returns \n12000\n as there is a matching float at \n$.salary\n.\n\n\n\nEXAMPLE 2\n\n\njson:getFloat(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getFloat(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching float at \n$.name\n.\n\n\n\ngetInt \n(Function)\n\n\nFunction retrieves the 'int' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing int value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the int value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getInt(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching int at \n$.age\n.\n\n\n\nEXAMPLE 2\n\n\njson:getInt(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getInt(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching int at \n$.name\n.\n\n\n\ngetLong \n(Function)\n\n\nFunction retrieves the 'long' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing long value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getLong(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching long at \n$.age\n.\n\n\n\nEXAMPLE 2\n\n\njson:getLong(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getLong(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching long at \n$.name\n.\n\n\n\ngetObject \n(Function)\n\n\nFunction retrieves the object specified in the given path of the JSON element.\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing the object.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getObject(json,'$.address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}\n, the function returns \n{'city' : 'NY', 'country' : 'USA'}\n as there is a matching object at \n$.address\n.\n\n\n\nEXAMPLE 2\n\n\njson:getObject(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching object at \n$.age\n.\n\n\n\nEXAMPLE 3\n\n\njson:getObject(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\ngetString \n(Function)\n\n\nFunction retrieves value specified in the given path of the JSON element as a string.\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getString(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nJohn\n as there is a matching string at \n$.name\n.\n\n\n\nEXAMPLE 2\n\n\njson:getString(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getString(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as a string as there is a matching element at \n$.age\n.\n\n\n\nEXAMPLE 4\n\n\njson:getString(json,'$.address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}\n, the function returns \n{'city' : 'NY', 'country' : 'USA'}\n as a string as there is  a matching element at \n$.address\n.\n\n\n\nisExists \n(Function)\n\n\nFunction checks whether there is a JSON element present in the given path or not.\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that needs to be searched for an elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to check for the element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:isExists(json, '$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \ntrue\n as there is an element in the given path.\n\n\n\nEXAMPLE 2\n\n\njson:isExists(json, '$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nfalse\n as there is no element in the given path.\n\n\n\nsetElement \n(Function)\n\n\nFunction sets JSON element into a given JSON at the specific path.\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n json.element)\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n json.element, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON to which a JSON element needs to be added/replaced.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path where the JSON element should be added/replaced.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \njson.element\n\n        \nThe JSON element being added.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nkey\n\n        \nThe key to be used to refer the newly added element in the input JSON.\n\n        \nAssumes the element is added to a JSON array, or the element selected by the JSON path will be updated.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:setElement(json, '$', \n{'country' : 'USA'}\n, 'address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}\n by adding 'address' element and returns the updated JSON.\n\n\n\nEXAMPLE 2\n\n\njson:setElement(json, '$', 40, 'age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'age' : 40}\n by adding 'age' element and returns the updated JSON.\n\n\n\nEXAMPLE 3\n\n\njson:setElement(json, '$', 45, 'age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true, 'age' : 40}\n, the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'age' : 45}\n by replacing 'age' element and returns the updated JSON.\n\n\n\nEXAMPLE 4\n\n\njson:setElement(json, '$.items', 'book')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'Stationary', 'items' : ['pen', 'pencil']}\n, the function updates the \njson\n as \n{'name' : 'John', 'items' : ['pen', 'pencil', 'book']}\n by adding 'book' in the items array and returns the updated JSON.\n\n\n\nEXAMPLE 5\n\n\njson:setElement(json, '$.item', 'book')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'Stationary', 'item' : 'pen'}\n, the function updates the \njson\n as \n{'name' : 'John', 'item' : 'book'}\n by replacing 'item' element and returns the updated JSON.\n\n\n\nEXAMPLE 6\n\n\njson:setElement(json, '$.address', 'city', 'SF')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function will not update, but returns the original JSON as there are no valid path for \n$.address\n.\n\n\n\ntoObject \n(Function)\n\n\nFunction generate JSON object from the given JSON string.\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string that needs to be converted to a JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:toJson(json)\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.\n\n\n\ntoString \n(Function)\n\n\nFunction generates a JSON string corresponding to a given JSON object.\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object to generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:toString(json)\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object.\n\n\n\ntokenize \n(Stream Processor)\n\n\nStream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path)\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input JSON that needs to be tokenized.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the set of elements that will be tokenized.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf there are no element on the given path, when set to \ntrue\n the system will drop the event, and when set to \nfalse\n the system will pass 'null' value to the jsonElement output attribute.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', enrolledSubjects:['Mathematics', 'Physics']}\n, and the 'path' is passed as \n$.enrolledSubjects\n then for both the elements in the selected JSON array, it generates it generates events as \n('$.enrolledSubjects', 'Mathematics')\n, and \n('$.enrolledSubjects', 'Physics')\n.\nFor the same input JSON, if the 'path' is passed as \n$.name\n then it will only produce one event \n('$.name', 'John')\n as the 'path' provided a single JSON element.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', age:25}\n,and the 'path' is passed as \n$.salary\n then the system will produce \n('$.salary', null)\n, as the 'fail.on.missing.attribute' is \ntrue\n and there are no matching element for \n$.salary\n.\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nStream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input JSON that needs to be tokenized.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the set of elements that will be tokenized.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf there are no element on the given path, when set to \ntrue\n the system will drop the event, and when set to \nfalse\n the system will pass 'null' value to the jsonElement output attribute.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', enrolledSubjects:['Mathematics', 'Physics']}\n, and the 'path' is passed as \n$.enrolledSubjects\n then for both the elements in the selected JSON array, it generates it generates events as \n('$.enrolledSubjects', 'Mathematics')\n, and \n('$.enrolledSubjects', 'Physics')\n.\nFor the same input JSON, if the 'path' is passed as \n$.name\n then it will only produce one event \n('$.name', 'John')\n as the 'path' provided a single JSON element.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', age:25}\n,and the 'path' is passed as \n$.salary\n then the system will produce \n('$.salary', null)\n, as the 'fail.on.missing.attribute' is \ntrue\n and there are no matching element for \n$.salary\n.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v202", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.2"
        }, 
        {
            "location": "/api/latest/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/latest/#getbool-function", 
            "text": "Function retrieves the 'boolean' value specified in the given path of the JSON element.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing boolean value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the boolean value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getBool(json,'$.married')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  true  as there is a matching boolean at  $.married .  EXAMPLE 2  json:getBool(json,'$.name')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  null  as there is no matching boolean at  $.name .  EXAMPLE 3  json:getBool(json,'$.foo')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  null  as there is no matching element at  $.foo .", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/latest/#getdouble-function", 
            "text": "Function retrieves the 'double' value specified in the given path of the JSON element.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing double value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the double value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getDouble(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'salary' : 12000.0} , the function returns  12000.0  as there is a matching double at  $.salary .  EXAMPLE 2  json:getDouble(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getDouble(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching double at  $.name .", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/latest/#getfloat-function", 
            "text": "Function retrieves the 'float' value specified in the given path of the JSON element.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing float value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the float value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getFloat(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'salary' : 12000.0} , the function returns  12000  as there is a matching float at  $.salary .  EXAMPLE 2  json:getFloat(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getFloat(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching float at  $.name .", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/latest/#getint-function", 
            "text": "Function retrieves the 'int' value specified in the given path of the JSON element.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing int value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the int value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getInt(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching int at  $.age .  EXAMPLE 2  json:getInt(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getInt(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching int at  $.name .", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/latest/#getlong-function", 
            "text": "Function retrieves the 'long' value specified in the given path of the JSON element.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing long value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the long value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getLong(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching long at  $.age .  EXAMPLE 2  json:getLong(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getLong(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching long at  $.name .", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/latest/#getobject-function", 
            "text": "Function retrieves the object specified in the given path of the JSON element.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing the object. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the object. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getObject(json,'$.address')  If the  json  is the format  {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns  {'city' : 'NY', 'country' : 'USA'}  as there is a matching object at  $.address .  EXAMPLE 2  json:getObject(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching object at  $.age .  EXAMPLE 3  json:getObject(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/latest/#getstring-function", 
            "text": "Function retrieves value specified in the given path of the JSON element as a string.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getString(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  John  as there is a matching string at  $.name .  EXAMPLE 2  json:getString(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getString(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as a string as there is a matching element at  $.age .  EXAMPLE 4  json:getString(json,'$.address')  If the  json  is the format  {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns  {'city' : 'NY', 'country' : 'USA'}  as a string as there is  a matching element at  $.address .", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/latest/#isexists-function", 
            "text": "Function checks whether there is a JSON element present in the given path or not.  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that needs to be searched for an elements. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to check for the element. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:isExists(json, '$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  true  as there is an element in the given path.  EXAMPLE 2  json:isExists(json, '$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  false  as there is no element in the given path.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/latest/#setelement-function", 
            "text": "Function sets JSON element into a given JSON at the specific path.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  json.element) OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  json.element,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON to which a JSON element needs to be added/replaced. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path where the JSON element should be added/replaced. \n         \n         STRING \n         No \n         Yes \n     \n     \n         json.element \n         The JSON element being added. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         Yes \n     \n     \n         key \n         The key to be used to refer the newly added element in the input JSON. \n         Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  json:setElement(json, '$',  {'country' : 'USA'} , 'address')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function updates the  json  as  {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}  by adding 'address' element and returns the updated JSON.  EXAMPLE 2  json:setElement(json, '$', 40, 'age')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function updates the  json  as  {'name' : 'John', 'married' : true, 'age' : 40}  by adding 'age' element and returns the updated JSON.  EXAMPLE 3  json:setElement(json, '$', 45, 'age')  If the  json  is the format  {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the  json  as  {'name' : 'John', 'married' : true, 'age' : 45}  by replacing 'age' element and returns the updated JSON.  EXAMPLE 4  json:setElement(json, '$.items', 'book')  If the  json  is the format  {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the  json  as  {'name' : 'John', 'items' : ['pen', 'pencil', 'book']}  by adding 'book' in the items array and returns the updated JSON.  EXAMPLE 5  json:setElement(json, '$.item', 'book')  If the  json  is the format  {'name' : 'Stationary', 'item' : 'pen'} , the function updates the  json  as  {'name' : 'John', 'item' : 'book'}  by replacing 'item' element and returns the updated JSON.  EXAMPLE 6  json:setElement(json, '$.address', 'city', 'SF')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for  $.address .", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/latest/#toobject-function", 
            "text": "Function generate JSON object from the given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string that needs to be converted to a JSON object. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:toJson(json)  This returns the JSON object corresponding to the given JSON string.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/latest/#tostring-function", 
            "text": "Function generates a JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object to generates a JSON string. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  json:toString(json)  This returns the JSON string corresponding to a given JSON object.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/latest/#tokenize-stream-processor", 
            "text": "Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path)\njson:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input JSON that needs to be tokenized. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The path of the set of elements that will be tokenized. \n         \n         STRING \n         No \n         Yes \n     \n     \n         fail.on.missing.attribute \n         If there are no element on the given path, when set to  true  the system will drop the event, and when set to  false  the system will pass 'null' value to the jsonElement output attribute. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as  $.enrolledSubjects  then for both the elements in the selected JSON array, it generates it generates events as  ('$.enrolledSubjects', 'Mathematics') , and  ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as  $.name  then it will only produce one event  ('$.name', 'John')  as the 'path' provided a single JSON element.  EXAMPLE 2  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', age:25} ,and the 'path' is passed as  $.salary  then the system will produce  ('$.salary', null) , as the 'fail.on.missing.attribute' is  true  and there are no matching element for  $.salary .", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#tokenizeasobject-stream-processor", 
            "text": "Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path)\njson:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input JSON that needs to be tokenized. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The path of the set of elements that will be tokenized. \n         \n         STRING \n         No \n         Yes \n     \n     \n         fail.on.missing.attribute \n         If there are no element on the given path, when set to  true  the system will drop the event, and when set to  false  the system will pass 'null' value to the jsonElement output attribute. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as  $.enrolledSubjects  then for both the elements in the selected JSON array, it generates it generates events as  ('$.enrolledSubjects', 'Mathematics') , and  ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as  $.name  then it will only produce one event  ('$.name', 'John')  as the 'path' provided a single JSON element.  EXAMPLE 2  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', age:25} ,and the 'path' is passed as  $.salary  then the system will produce  ('$.salary', null) , as the 'fail.on.missing.attribute' is  true  and there are no matching element for  $.salary .", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/", 
            "text": "API Docs - v2.0.2\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nFunction retrieves the 'boolean' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing boolean value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the boolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getBool(json,'$.married')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \ntrue\n as there is a matching boolean at \n$.married\n.\n\n\n\nEXAMPLE 2\n\n\njson:getBool(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \nnull\n as there is no matching boolean at \n$.name\n.\n\n\n\nEXAMPLE 3\n\n\njson:getBool(json,'$.foo')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \nnull\n as there is no matching element at \n$.foo\n.\n\n\n\ngetDouble \n(Function)\n\n\nFunction retrieves the 'double' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing double value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getDouble(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'salary' : 12000.0}\n, the function returns \n12000.0\n as there is a matching double at \n$.salary\n.\n\n\n\nEXAMPLE 2\n\n\njson:getDouble(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getDouble(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching double at \n$.name\n.\n\n\n\ngetFloat \n(Function)\n\n\nFunction retrieves the 'float' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing float value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getFloat(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'salary' : 12000.0}\n, the function returns \n12000\n as there is a matching float at \n$.salary\n.\n\n\n\nEXAMPLE 2\n\n\njson:getFloat(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getFloat(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching float at \n$.name\n.\n\n\n\ngetInt \n(Function)\n\n\nFunction retrieves the 'int' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing int value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the int value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getInt(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching int at \n$.age\n.\n\n\n\nEXAMPLE 2\n\n\njson:getInt(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getInt(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching int at \n$.name\n.\n\n\n\ngetLong \n(Function)\n\n\nFunction retrieves the 'long' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing long value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getLong(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching long at \n$.age\n.\n\n\n\nEXAMPLE 2\n\n\njson:getLong(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getLong(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching long at \n$.name\n.\n\n\n\ngetObject \n(Function)\n\n\nFunction retrieves the object specified in the given path of the JSON element.\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing the object.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getObject(json,'$.address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}\n, the function returns \n{'city' : 'NY', 'country' : 'USA'}\n as there is a matching object at \n$.address\n.\n\n\n\nEXAMPLE 2\n\n\njson:getObject(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching object at \n$.age\n.\n\n\n\nEXAMPLE 3\n\n\njson:getObject(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\ngetString \n(Function)\n\n\nFunction retrieves value specified in the given path of the JSON element as a string.\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getString(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nJohn\n as there is a matching string at \n$.name\n.\n\n\n\nEXAMPLE 2\n\n\njson:getString(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getString(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as a string as there is a matching element at \n$.age\n.\n\n\n\nEXAMPLE 4\n\n\njson:getString(json,'$.address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}\n, the function returns \n{'city' : 'NY', 'country' : 'USA'}\n as a string as there is  a matching element at \n$.address\n.\n\n\n\nisExists \n(Function)\n\n\nFunction checks whether there is a JSON element present in the given path or not.\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that needs to be searched for an elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to check for the element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:isExists(json, '$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \ntrue\n as there is an element in the given path.\n\n\n\nEXAMPLE 2\n\n\njson:isExists(json, '$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nfalse\n as there is no element in the given path.\n\n\n\nsetElement \n(Function)\n\n\nFunction sets JSON element into a given JSON at the specific path.\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n json.element)\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n json.element, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON to which a JSON element needs to be added/replaced.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path where the JSON element should be added/replaced.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \njson.element\n\n        \nThe JSON element being added.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nkey\n\n        \nThe key to be used to refer the newly added element in the input JSON.\n\n        \nAssumes the element is added to a JSON array, or the element selected by the JSON path will be updated.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:setElement(json, '$', \n{'country' : 'USA'}\n, 'address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}\n by adding 'address' element and returns the updated JSON.\n\n\n\nEXAMPLE 2\n\n\njson:setElement(json, '$', 40, 'age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'age' : 40}\n by adding 'age' element and returns the updated JSON.\n\n\n\nEXAMPLE 3\n\n\njson:setElement(json, '$', 45, 'age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true, 'age' : 40}\n, the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'age' : 45}\n by replacing 'age' element and returns the updated JSON.\n\n\n\nEXAMPLE 4\n\n\njson:setElement(json, '$.items', 'book')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'Stationary', 'items' : ['pen', 'pencil']}\n, the function updates the \njson\n as \n{'name' : 'John', 'items' : ['pen', 'pencil', 'book']}\n by adding 'book' in the items array and returns the updated JSON.\n\n\n\nEXAMPLE 5\n\n\njson:setElement(json, '$.item', 'book')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'Stationary', 'item' : 'pen'}\n, the function updates the \njson\n as \n{'name' : 'John', 'item' : 'book'}\n by replacing 'item' element and returns the updated JSON.\n\n\n\nEXAMPLE 6\n\n\njson:setElement(json, '$.address', 'city', 'SF')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function will not update, but returns the original JSON as there are no valid path for \n$.address\n.\n\n\n\ntoObject \n(Function)\n\n\nFunction generate JSON object from the given JSON string.\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string that needs to be converted to a JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:toJson(json)\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.\n\n\n\ntoString \n(Function)\n\n\nFunction generates a JSON string corresponding to a given JSON object.\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object to generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:toString(json)\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object.\n\n\n\ntokenize \n(Stream Processor)\n\n\nStream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path)\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input JSON that needs to be tokenized.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the set of elements that will be tokenized.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf there are no element on the given path, when set to \ntrue\n the system will drop the event, and when set to \nfalse\n the system will pass 'null' value to the jsonElement output attribute.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', enrolledSubjects:['Mathematics', 'Physics']}\n, and the 'path' is passed as \n$.enrolledSubjects\n then for both the elements in the selected JSON array, it generates it generates events as \n('$.enrolledSubjects', 'Mathematics')\n, and \n('$.enrolledSubjects', 'Physics')\n.\nFor the same input JSON, if the 'path' is passed as \n$.name\n then it will only produce one event \n('$.name', 'John')\n as the 'path' provided a single JSON element.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', age:25}\n,and the 'path' is passed as \n$.salary\n then the system will produce \n('$.salary', null)\n, as the 'fail.on.missing.attribute' is \ntrue\n and there are no matching element for \n$.salary\n.\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nStream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input JSON that needs to be tokenized.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the set of elements that will be tokenized.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf there are no element on the given path, when set to \ntrue\n the system will drop the event, and when set to \nfalse\n the system will pass 'null' value to the jsonElement output attribute.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', enrolledSubjects:['Mathematics', 'Physics']}\n, and the 'path' is passed as \n$.enrolledSubjects\n then for both the elements in the selected JSON array, it generates it generates events as \n('$.enrolledSubjects', 'Mathematics')\n, and \n('$.enrolledSubjects', 'Physics')\n.\nFor the same input JSON, if the 'path' is passed as \n$.name\n then it will only produce one event \n('$.name', 'John')\n as the 'path' provided a single JSON element.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', age:25}\n,and the 'path' is passed as \n$.salary\n then the system will produce \n('$.salary', null)\n, as the 'fail.on.missing.attribute' is \ntrue\n and there are no matching element for \n$.salary\n.", 
            "title": "2.0.2"
        }, 
        {
            "location": "/api/2.0.2/#api-docs-v202", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.2"
        }, 
        {
            "location": "/api/2.0.2/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/2.0.2/#getbool-function", 
            "text": "Function retrieves the 'boolean' value specified in the given path of the JSON element.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing boolean value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the boolean value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getBool(json,'$.married')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  true  as there is a matching boolean at  $.married .  EXAMPLE 2  json:getBool(json,'$.name')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  null  as there is no matching boolean at  $.name .  EXAMPLE 3  json:getBool(json,'$.foo')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  null  as there is no matching element at  $.foo .", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/2.0.2/#getdouble-function", 
            "text": "Function retrieves the 'double' value specified in the given path of the JSON element.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing double value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the double value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getDouble(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'salary' : 12000.0} , the function returns  12000.0  as there is a matching double at  $.salary .  EXAMPLE 2  json:getDouble(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getDouble(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching double at  $.name .", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/2.0.2/#getfloat-function", 
            "text": "Function retrieves the 'float' value specified in the given path of the JSON element.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing float value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the float value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getFloat(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'salary' : 12000.0} , the function returns  12000  as there is a matching float at  $.salary .  EXAMPLE 2  json:getFloat(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getFloat(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching float at  $.name .", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/2.0.2/#getint-function", 
            "text": "Function retrieves the 'int' value specified in the given path of the JSON element.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing int value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the int value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getInt(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching int at  $.age .  EXAMPLE 2  json:getInt(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getInt(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching int at  $.name .", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/2.0.2/#getlong-function", 
            "text": "Function retrieves the 'long' value specified in the given path of the JSON element.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing long value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the long value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getLong(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching long at  $.age .  EXAMPLE 2  json:getLong(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getLong(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching long at  $.name .", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/2.0.2/#getobject-function", 
            "text": "Function retrieves the object specified in the given path of the JSON element.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing the object. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the object. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getObject(json,'$.address')  If the  json  is the format  {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns  {'city' : 'NY', 'country' : 'USA'}  as there is a matching object at  $.address .  EXAMPLE 2  json:getObject(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching object at  $.age .  EXAMPLE 3  json:getObject(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/2.0.2/#getstring-function", 
            "text": "Function retrieves value specified in the given path of the JSON element as a string.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getString(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  John  as there is a matching string at  $.name .  EXAMPLE 2  json:getString(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getString(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as a string as there is a matching element at  $.age .  EXAMPLE 4  json:getString(json,'$.address')  If the  json  is the format  {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns  {'city' : 'NY', 'country' : 'USA'}  as a string as there is  a matching element at  $.address .", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/2.0.2/#isexists-function", 
            "text": "Function checks whether there is a JSON element present in the given path or not.  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that needs to be searched for an elements. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to check for the element. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:isExists(json, '$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  true  as there is an element in the given path.  EXAMPLE 2  json:isExists(json, '$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  false  as there is no element in the given path.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/2.0.2/#setelement-function", 
            "text": "Function sets JSON element into a given JSON at the specific path.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  json.element) OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  json.element,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON to which a JSON element needs to be added/replaced. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path where the JSON element should be added/replaced. \n         \n         STRING \n         No \n         Yes \n     \n     \n         json.element \n         The JSON element being added. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         Yes \n     \n     \n         key \n         The key to be used to refer the newly added element in the input JSON. \n         Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  json:setElement(json, '$',  {'country' : 'USA'} , 'address')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function updates the  json  as  {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}  by adding 'address' element and returns the updated JSON.  EXAMPLE 2  json:setElement(json, '$', 40, 'age')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function updates the  json  as  {'name' : 'John', 'married' : true, 'age' : 40}  by adding 'age' element and returns the updated JSON.  EXAMPLE 3  json:setElement(json, '$', 45, 'age')  If the  json  is the format  {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the  json  as  {'name' : 'John', 'married' : true, 'age' : 45}  by replacing 'age' element and returns the updated JSON.  EXAMPLE 4  json:setElement(json, '$.items', 'book')  If the  json  is the format  {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the  json  as  {'name' : 'John', 'items' : ['pen', 'pencil', 'book']}  by adding 'book' in the items array and returns the updated JSON.  EXAMPLE 5  json:setElement(json, '$.item', 'book')  If the  json  is the format  {'name' : 'Stationary', 'item' : 'pen'} , the function updates the  json  as  {'name' : 'John', 'item' : 'book'}  by replacing 'item' element and returns the updated JSON.  EXAMPLE 6  json:setElement(json, '$.address', 'city', 'SF')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for  $.address .", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/2.0.2/#toobject-function", 
            "text": "Function generate JSON object from the given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string that needs to be converted to a JSON object. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:toJson(json)  This returns the JSON object corresponding to the given JSON string.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/2.0.2/#tostring-function", 
            "text": "Function generates a JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object to generates a JSON string. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  json:toString(json)  This returns the JSON string corresponding to a given JSON object.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/2.0.2/#tokenize-stream-processor", 
            "text": "Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path)\njson:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input JSON that needs to be tokenized. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The path of the set of elements that will be tokenized. \n         \n         STRING \n         No \n         Yes \n     \n     \n         fail.on.missing.attribute \n         If there are no element on the given path, when set to  true  the system will drop the event, and when set to  false  the system will pass 'null' value to the jsonElement output attribute. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as  $.enrolledSubjects  then for both the elements in the selected JSON array, it generates it generates events as  ('$.enrolledSubjects', 'Mathematics') , and  ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as  $.name  then it will only produce one event  ('$.name', 'John')  as the 'path' provided a single JSON element.  EXAMPLE 2  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', age:25} ,and the 'path' is passed as  $.salary  then the system will produce  ('$.salary', null) , as the 'fail.on.missing.attribute' is  true  and there are no matching element for  $.salary .", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.2/#tokenizeasobject-stream-processor", 
            "text": "Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path)\njson:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input JSON that needs to be tokenized. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The path of the set of elements that will be tokenized. \n         \n         STRING \n         No \n         Yes \n     \n     \n         fail.on.missing.attribute \n         If there are no element on the given path, when set to  true  the system will drop the event, and when set to  false  the system will pass 'null' value to the jsonElement output attribute. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as  $.enrolledSubjects  then for both the elements in the selected JSON array, it generates it generates events as  ('$.enrolledSubjects', 'Mathematics') , and  ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as  $.name  then it will only produce one event  ('$.name', 'John')  as the 'path' provided a single JSON element.  EXAMPLE 2  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', age:25} ,and the 'path' is passed as  $.salary  then the system will produce  ('$.salary', null) , as the 'fail.on.missing.attribute' is  true  and there are no matching element for  $.salary .", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/", 
            "text": "API Docs - v2.0.1\n\n\n\n\nTested Siddhi Core version: \n5.0.0\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nFunction retrieves the 'boolean' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing boolean value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the boolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getBool(json,'$.married')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \ntrue\n as there is a matching boolean at \n$.married\n.\n\n\n\nEXAMPLE 2\n\n\njson:getBool(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \nnull\n as there is no matching boolean at \n$.name\n.\n\n\n\nEXAMPLE 3\n\n\njson:getBool(json,'$.foo')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n, the function returns \nnull\n as there is no matching element at \n$.foo\n.\n\n\n\ngetDouble \n(Function)\n\n\nFunction retrieves the 'double' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing double value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the double value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getDouble(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'salary' : 12000.0}\n, the function returns \n12000.0\n as there is a matching double at \n$.salary\n.\n\n\n\nEXAMPLE 2\n\n\njson:getDouble(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getDouble(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching double at \n$.name\n.\n\n\n\ngetFloat \n(Function)\n\n\nFunction retrieves the 'float' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing float value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the float value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getFloat(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'salary' : 12000.0}\n, the function returns \n12000\n as there is a matching float at \n$.salary\n.\n\n\n\nEXAMPLE 2\n\n\njson:getFloat(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getFloat(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching float at \n$.name\n.\n\n\n\ngetInt \n(Function)\n\n\nFunction retrieves the 'int' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing int value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the int value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getInt(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching int at \n$.age\n.\n\n\n\nEXAMPLE 2\n\n\njson:getInt(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getInt(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching int at \n$.name\n.\n\n\n\ngetLong \n(Function)\n\n\nFunction retrieves the 'long' value specified in the given path of the JSON element.\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing long value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getLong(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching long at \n$.age\n.\n\n\n\nEXAMPLE 2\n\n\njson:getLong(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getLong(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching long at \n$.name\n.\n\n\n\ngetObject \n(Function)\n\n\nFunction retrieves the object specified in the given path of the JSON element.\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing the object.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getObject(json,'$.address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}\n, the function returns \n{'city' : 'NY', 'country' : 'USA'}\n as there is a matching object at \n$.address\n.\n\n\n\nEXAMPLE 2\n\n\njson:getObject(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as there is a matching object at \n$.age\n.\n\n\n\nEXAMPLE 3\n\n\njson:getObject(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\ngetString \n(Function)\n\n\nFunction retrieves value specified in the given path of the JSON element as a string.\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input containing value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to fetch the value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:getString(json,'$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nJohn\n as there is a matching string at \n$.name\n.\n\n\n\nEXAMPLE 2\n\n\njson:getString(json,'$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nnull\n as there are no matching element at \n$.salary\n.\n\n\n\nEXAMPLE 3\n\n\njson:getString(json,'$.age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \n23\n as a string as there is a matching element at \n$.age\n.\n\n\n\nEXAMPLE 4\n\n\njson:getString(json,'$.address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}\n, the function returns \n{'city' : 'NY', 'country' : 'USA'}\n as a string as there is  a matching element at \n$.address\n.\n\n\n\nisExists \n(Function)\n\n\nFunction checks whether there is a JSON element present in the given path or not.\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that needs to be searched for an elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path to check for the element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:isExists(json, '$.name')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \ntrue\n as there is an element in the given path.\n\n\n\nEXAMPLE 2\n\n\njson:isExists(json, '$.salary')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'age' : 23}\n, the function returns \nfalse\n as there is no element in the given path.\n\n\n\nsetElement \n(Function)\n\n\nFunction sets JSON element into a given JSON at the specific path.\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n json.element)\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n json.element, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON to which a JSON element needs to be added/replaced.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe JSON path where the JSON element should be added/replaced.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \njson.element\n\n        \nThe JSON element being added.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nkey\n\n        \nThe key to be used to refer the newly added element in the input JSON.\n\n        \nAssumes the element is added to a JSON array.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:setElement(json, '$', \n{'country' : 'USA'}\n, 'address')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}\n by adding 'address' element and returns the updated JSON.\n\n\n\nEXAMPLE 2\n\n\njson:setElement(json, '$', 40, 'age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'age' : 40}\n by adding 'age' element and returns the updated JSON.\n\n\n\nEXAMPLE 3\n\n\njson:setElement(json, '$', 45, 'age')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true, 'age' : 40}\n, the function updates the \njson\n as \n{'name' : 'John', 'married' : true, 'age' : 45}\n by replacing 'age' element and returns the updated JSON.\n\n\n\nEXAMPLE 4\n\n\njson:setElement(json, '$.items', 'book')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'Stationary', 'items' : ['pen', 'pencil']}\n, the function updates the \njson\n as \n{'name' : 'John', 'items' : ['pen', 'pencil', 'book']}\n by adding 'book' in the items array and returns the updated JSON.\n\n\n\nEXAMPLE 5\n\n\njson:setElement(json, '$.address', 'city', 'SF')\n\n\n\n\nIf the \njson\n is the format \n{'name' : 'John', 'married' : true}\n,the function will not update, but returns the original JSON as there are no valid path for \n$.address\n.\n\n\n\ntoObject \n(Function)\n\n\nFunction generate JSON object from the given JSON string.\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string that needs to be converted to a JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:toJson(json)\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.\n\n\n\ntoString \n(Function)\n\n\nFunction generates a JSON string corresponding to a given JSON object.\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object to generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\njson:toString(json)\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object.\n\n\n\ntokenize \n(Stream Processor)\n\n\nStream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path)\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input JSON that needs to be tokenized.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the set of elements that will be tokenized.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf there are no element on the given path, when set to \ntrue\n the system will drop the event, and when set to \nfalse\n the system will pass 'null' value to the jsonElement output attribute.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', enrolledSubjects:['Mathematics', 'Physics']}\n, and the 'path' is passed as \n$.enrolledSubjects\n then for both the elements in the selected JSON array, it generates it generates events as \n('$.enrolledSubjects', 'Mathematics')\n, and \n('$.enrolledSubjects', 'Physics')\n.\nFor the same input JSON, if the 'path' is passed as \n$.name\n then it will only produce one event \n('$.name', 'John')\n as the 'path' provided a single JSON element.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', age:25}\n,and the 'path' is passed as \n$.salary\n then the system will produce \n('$.salary', null)\n, as the 'fail.on.missing.attribute' is \ntrue\n and there are no matching element for \n$.salary\n.\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nStream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input JSON that needs to be tokenized.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the set of elements that will be tokenized.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf there are no element on the given path, when set to \ntrue\n the system will drop the event, and when set to \nfalse\n the system will pass 'null' value to the jsonElement output attribute.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', enrolledSubjects:['Mathematics', 'Physics']}\n, and the 'path' is passed as \n$.enrolledSubjects\n then for both the elements in the selected JSON array, it generates it generates events as \n('$.enrolledSubjects', 'Mathematics')\n, and \n('$.enrolledSubjects', 'Physics')\n.\nFor the same input JSON, if the 'path' is passed as \n$.name\n then it will only produce one event \n('$.name', 'John')\n as the 'path' provided a single JSON element.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;\n\n\n\n\nIf the input 'json' is \n{name:'John', age:25}\n,and the 'path' is passed as \n$.salary\n then the system will produce \n('$.salary', null)\n, as the 'fail.on.missing.attribute' is \ntrue\n and there are no matching element for \n$.salary\n.", 
            "title": "2.0.1"
        }, 
        {
            "location": "/api/2.0.1/#api-docs-v201", 
            "text": "Tested Siddhi Core version:  5.0.0  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.1"
        }, 
        {
            "location": "/api/2.0.1/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/2.0.1/#getbool-function", 
            "text": "Function retrieves the 'boolean' value specified in the given path of the JSON element.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing boolean value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the boolean value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getBool(json,'$.married')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  true  as there is a matching boolean at  $.married .  EXAMPLE 2  json:getBool(json,'$.name')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  null  as there is no matching boolean at  $.name .  EXAMPLE 3  json:getBool(json,'$.foo')  If the  json  is the format  {'name' : 'John', 'married' : true} , the function returns  null  as there is no matching element at  $.foo .", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/2.0.1/#getdouble-function", 
            "text": "Function retrieves the 'double' value specified in the given path of the JSON element.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing double value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the double value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getDouble(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'salary' : 12000.0} , the function returns  12000.0  as there is a matching double at  $.salary .  EXAMPLE 2  json:getDouble(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getDouble(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching double at  $.name .", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/2.0.1/#getfloat-function", 
            "text": "Function retrieves the 'float' value specified in the given path of the JSON element.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing float value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the float value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getFloat(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'salary' : 12000.0} , the function returns  12000  as there is a matching float at  $.salary .  EXAMPLE 2  json:getFloat(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getFloat(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching float at  $.name .", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/2.0.1/#getint-function", 
            "text": "Function retrieves the 'int' value specified in the given path of the JSON element.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing int value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the int value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getInt(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching int at  $.age .  EXAMPLE 2  json:getInt(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getInt(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching int at  $.name .", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/2.0.1/#getlong-function", 
            "text": "Function retrieves the 'long' value specified in the given path of the JSON element.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing long value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the long value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getLong(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching long at  $.age .  EXAMPLE 2  json:getLong(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getLong(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching long at  $.name .", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/2.0.1/#getobject-function", 
            "text": "Function retrieves the object specified in the given path of the JSON element.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing the object. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the object. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getObject(json,'$.address')  If the  json  is the format  {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns  {'city' : 'NY', 'country' : 'USA'}  as there is a matching object at  $.address .  EXAMPLE 2  json:getObject(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as there is a matching object at  $.age .  EXAMPLE 3  json:getObject(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/2.0.1/#getstring-function", 
            "text": "Function retrieves value specified in the given path of the JSON element as a string.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input containing value. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to fetch the value. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:getString(json,'$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  John  as there is a matching string at  $.name .  EXAMPLE 2  json:getString(json,'$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  null  as there are no matching element at  $.salary .  EXAMPLE 3  json:getString(json,'$.age')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  23  as a string as there is a matching element at  $.age .  EXAMPLE 4  json:getString(json,'$.address')  If the  json  is the format  {'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}} , the function returns  {'city' : 'NY', 'country' : 'USA'}  as a string as there is  a matching element at  $.address .", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/2.0.1/#isexists-function", 
            "text": "Function checks whether there is a JSON element present in the given path or not.  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that needs to be searched for an elements. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path to check for the element. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:isExists(json, '$.name')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  true  as there is an element in the given path.  EXAMPLE 2  json:isExists(json, '$.salary')  If the  json  is the format  {'name' : 'John', 'age' : 23} , the function returns  false  as there is no element in the given path.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/2.0.1/#setelement-function", 
            "text": "Function sets JSON element into a given JSON at the specific path.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  json.element) OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  json.element,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON to which a JSON element needs to be added/replaced. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The JSON path where the JSON element should be added/replaced. \n         \n         STRING \n         No \n         Yes \n     \n     \n         json.element \n         The JSON element being added. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         Yes \n     \n     \n         key \n         The key to be used to refer the newly added element in the input JSON. \n         Assumes the element is added to a JSON array. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  json:setElement(json, '$',  {'country' : 'USA'} , 'address')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function updates the  json  as  {'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}  by adding 'address' element and returns the updated JSON.  EXAMPLE 2  json:setElement(json, '$', 40, 'age')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function updates the  json  as  {'name' : 'John', 'married' : true, 'age' : 40}  by adding 'age' element and returns the updated JSON.  EXAMPLE 3  json:setElement(json, '$', 45, 'age')  If the  json  is the format  {'name' : 'John', 'married' : true, 'age' : 40} , the function updates the  json  as  {'name' : 'John', 'married' : true, 'age' : 45}  by replacing 'age' element and returns the updated JSON.  EXAMPLE 4  json:setElement(json, '$.items', 'book')  If the  json  is the format  {'name' : 'Stationary', 'items' : ['pen', 'pencil']} , the function updates the  json  as  {'name' : 'John', 'items' : ['pen', 'pencil', 'book']}  by adding 'book' in the items array and returns the updated JSON.  EXAMPLE 5  json:setElement(json, '$.address', 'city', 'SF')  If the  json  is the format  {'name' : 'John', 'married' : true} ,the function will not update, but returns the original JSON as there are no valid path for  $.address .", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/2.0.1/#toobject-function", 
            "text": "Function generate JSON object from the given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string that needs to be converted to a JSON object. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  json:toJson(json)  This returns the JSON object corresponding to the given JSON string.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/2.0.1/#tostring-function", 
            "text": "Function generates a JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object to generates a JSON string. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  json:toString(json)  This returns the JSON string corresponding to a given JSON object.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/2.0.1/#tokenize-stream-processor", 
            "text": "Stream processor tokenizes the given JSON into to multiple JSON string elements and sends them as separate events.  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path)\njson:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input JSON that needs to be tokenized. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The path of the set of elements that will be tokenized. \n         \n         STRING \n         No \n         Yes \n     \n     \n         fail.on.missing.attribute \n         If there are no element on the given path, when set to  true  the system will drop the event, and when set to  false  the system will pass 'null' value to the jsonElement output attribute. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path will be returned as a JSON string. If the 'path' selects a JSON array then the system returns each element in the array as a JSON string via a separate events. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as  $.enrolledSubjects  then for both the elements in the selected JSON array, it generates it generates events as  ('$.enrolledSubjects', 'Mathematics') , and  ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as  $.name  then it will only produce one event  ('$.name', 'John')  as the 'path' provided a single JSON element.  EXAMPLE 2  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', age:25} ,and the 'path' is passed as  $.salary  then the system will produce  ('$.salary', null) , as the 'fail.on.missing.attribute' is  true  and there are no matching element for  $.salary .", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/#tokenizeasobject-stream-processor", 
            "text": "Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path)\njson:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input JSON that needs to be tokenized. \n         \n         STRING OBJECT \n         No \n         Yes \n     \n     \n         path \n         The path of the set of elements that will be tokenized. \n         \n         STRING \n         No \n         Yes \n     \n     \n         fail.on.missing.attribute \n         If there are no element on the given path, when set to  true  the system will drop the event, and when set to  false  the system will pass 'null' value to the jsonElement output attribute. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path will be returned as a JSON object. If the 'path' selects a JSON array then the system returns each element in the array as a JSON object via a separate events. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', enrolledSubjects:['Mathematics', 'Physics']} , and the 'path' is passed as  $.enrolledSubjects  then for both the elements in the selected JSON array, it generates it generates events as  ('$.enrolledSubjects', 'Mathematics') , and  ('$.enrolledSubjects', 'Physics') . For the same input JSON, if the 'path' is passed as  $.name  then it will only produce one event  ('$.name', 'John')  as the 'path' provided a single JSON element.  EXAMPLE 2  define stream InputStream (json string, path string);\n\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path, true)\nselect path, jsonElement\ninsert into OutputStream;  If the input 'json' is  {name:'John', age:25} ,and the 'path' is passed as  $.salary  then the system will produce  ('$.salary', null) , as the 'fail.on.missing.attribute' is  true  and there are no matching element for  $.salary .", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/", 
            "text": "API Docs - v2.0.0\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the boolean value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getBool' function fetches theboolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetDouble \n(Function)\n\n\nThis method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getDouble' function fetches thedouble value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the double value of the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetFloat \n(Function)\n\n\nThis method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getFloat' function fetches thevalue.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetInt \n(Function)\n\n\nThis method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getInt' function fetches theinteger value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.\n\n\n\ngetLong \n(Function)\n\n\nThis returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON element from which the 'getLong' functionfetches the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.\n\n\n\ngetObject \n(Function)\n\n\nThis returns the object of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getObject' function fetches theobject.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetString \n(Function)\n\n\nThis returns the string value of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON input from which the 'getString' function fetches  the string value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\nisExists \n(Function)\n\n\nThis method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input in a given path, on which the function performs the search forJSON elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that contains the input JSON on which the function performs the search.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input into which is this function inserts the new value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path on the JSON input which is used to insert the given element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe JSON element which is inserted by the function into the input JSON.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element into the input JSON.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.\n\n\n\ntoObject \n(Function)\n\n\nThis method returns the JSON object related to a given JSON string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string from which the function generates the JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.\n\n\n\ntoString \n(Function)\n\n\nThis method returns the JSON string corresponding to a given JSON object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object from which the function generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis tokenizes the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis tokenizes the given JSON based on the path provided and returns the response as an object.\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that is tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON that the function tokenizes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path and the JSON.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/2.0.0/#getbool-function", 
            "text": "This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the boolean value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getBool' function fetches theboolean value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/2.0.0/#getdouble-function", 
            "text": "This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getDouble' function fetches thedouble value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/2.0.0/#getfloat-function", 
            "text": "This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getFloat' function fetches thevalue. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/2.0.0/#getint-function", 
            "text": "This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getInt' function fetches theinteger value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/2.0.0/#getlong-function", 
            "text": "This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON element from which the 'getLong' functionfetches the long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/2.0.0/#getobject-function", 
            "text": "This returns the object of the JSON element present in the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getObject' function fetches theobject. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/2.0.0/#getstring-function", 
            "text": "This returns the string value of the JSON element present in the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON input from which the 'getString' function fetches  the string value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/2.0.0/#isexists-function", 
            "text": "This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input in a given path, on which the function performs the search forJSON elements. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that contains the input JSON on which the function performs the search. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/2.0.0/#setelement-function", 
            "text": "This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input into which is this function inserts the new value. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path on the JSON input which is used to insert the given element. \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The JSON element which is inserted by the function into the input JSON. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element into the input JSON. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/2.0.0/#toobject-function", 
            "text": "This method returns the JSON object related to a given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string from which the function generates the JSON object. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/2.0.0/#tostring-function", 
            "text": "This method returns the JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object from which the function generates a JSON string. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/2.0.0/#tokenize-stream-processor", 
            "text": "This tokenizes the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream.  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#tokenizeasobject-stream-processor", 
            "text": "This tokenizes the given JSON based on the path provided and returns the response as an object.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that is tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON that the function tokenizes. \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path and the JSON. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/", 
            "text": "API Docs - v1.1.1\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the boolean value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getBool' function fetches theboolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetDouble \n(Function)\n\n\nThis method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getDouble' function fetches thedouble value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the double value of the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetFloat \n(Function)\n\n\nThis method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getFloat' function fetches thevalue.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetInt \n(Function)\n\n\nThis method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getInt' function fetches theinteger value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.\n\n\n\ngetLong \n(Function)\n\n\nThis returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON element from which the 'getLong' functionfetches the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.\n\n\n\ngetObject \n(Function)\n\n\nThis returns the object of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getObject' function fetches theobject.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetString \n(Function)\n\n\nThis returns the string value of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON input from which the 'getString' function fetches  the string value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\nisExists \n(Function)\n\n\nThis method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input in a given path, on which the function performs the search forJSON elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that contains the input JSON on which the function performs the search.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input into which is this function inserts the new value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path on the JSON input which is used to insert the given element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe JSON element which is inserted by the function into the input JSON.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element into the input JSON.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.\n\n\n\ntoObject \n(Function)\n\n\nThis method returns the JSON object related to a given JSON string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string from which the function generates the JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.\n\n\n\ntoString \n(Function)\n\n\nThis method returns the JSON string corresponding to a given JSON object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object from which the function generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis tokenizes the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis tokenizes the given JSON based on the path provided and returns the response as an object.\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that is tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON that the function tokenizes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path and the JSON.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.1.1/#getbool-function", 
            "text": "This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the boolean value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getBool' function fetches theboolean value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.1.1/#getdouble-function", 
            "text": "This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getDouble' function fetches thedouble value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.1.1/#getfloat-function", 
            "text": "This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getFloat' function fetches thevalue. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.1.1/#getint-function", 
            "text": "This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getInt' function fetches theinteger value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.1.1/#getlong-function", 
            "text": "This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON element from which the 'getLong' functionfetches the long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.1.1/#getobject-function", 
            "text": "This returns the object of the JSON element present in the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getObject' function fetches theobject. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.1.1/#getstring-function", 
            "text": "This returns the string value of the JSON element present in the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON input from which the 'getString' function fetches  the string value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.1.1/#isexists-function", 
            "text": "This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input in a given path, on which the function performs the search forJSON elements. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that contains the input JSON on which the function performs the search. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.1.1/#setelement-function", 
            "text": "This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input into which is this function inserts the new value. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path on the JSON input which is used to insert the given element. \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The JSON element which is inserted by the function into the input JSON. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element into the input JSON. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.1.1/#toobject-function", 
            "text": "This method returns the JSON object related to a given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string from which the function generates the JSON object. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.1.1/#tostring-function", 
            "text": "This method returns the JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object from which the function generates a JSON string. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.1.1/#tokenize-stream-processor", 
            "text": "This tokenizes the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream.  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#tokenizeasobject-stream-processor", 
            "text": "This tokenizes the given JSON based on the path provided and returns the response as an object.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that is tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON that the function tokenizes. \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path and the JSON. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/", 
            "text": "API Docs - v1.1.0\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the boolean value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getBool' function fetches theboolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetDouble \n(Function)\n\n\nThis method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getDouble' function fetches thedouble value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the double value of the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetFloat \n(Function)\n\n\nThis method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getFloat' function fetches thevalue.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetInt \n(Function)\n\n\nThis method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getInt' function fetches theinteger value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.\n\n\n\ngetLong \n(Function)\n\n\nThis returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON element from which the 'getLong' functionfetches the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.\n\n\n\ngetObject \n(Function)\n\n\nThis returns the object of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getObject' function fetches theobject.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetString \n(Function)\n\n\nThis returns the string value of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON input from which the 'getString' function fetches  the string value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\nisExists \n(Function)\n\n\nThis method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input in a given path, on which the function performs the search forJSON elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that contains the input JSON on which the function performs the search.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input into which is this function inserts the new value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path on the JSON input which is used to insert the given element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe JSON element which is inserted by the function into the input JSON.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element into the input JSON.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.\n\n\n\ntoObject \n(Function)\n\n\nThis method returns the JSON object related to a given JSON string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string from which the function generates the JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.\n\n\n\ntoString \n(Function)\n\n\nThis method returns the JSON string corresponding to a given JSON object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object from which the function generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis tokenizes the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis tokenizes the given JSON based on the path provided and returns the response as an object.\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that is tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON that the function tokenizes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path and the JSON.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#api-docs-v110", 
            "text": "", 
            "title": "API Docs - v1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.1.0/#getbool-function", 
            "text": "This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the boolean value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getBool' function fetches theboolean value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.1.0/#getdouble-function", 
            "text": "This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getDouble' function fetches thedouble value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.1.0/#getfloat-function", 
            "text": "This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getFloat' function fetches thevalue. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.1.0/#getint-function", 
            "text": "This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getInt' function fetches theinteger value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.1.0/#getlong-function", 
            "text": "This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON element from which the 'getLong' functionfetches the long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.1.0/#getobject-function", 
            "text": "This returns the object of the JSON element present in the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getObject' function fetches theobject. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.1.0/#getstring-function", 
            "text": "This returns the string value of the JSON element present in the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON input from which the 'getString' function fetches  the string value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.1.0/#isexists-function", 
            "text": "This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input in a given path, on which the function performs the search forJSON elements. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that contains the input JSON on which the function performs the search. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.1.0/#setelement-function", 
            "text": "This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input into which is this function inserts the new value. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path on the JSON input which is used to insert the given element. \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The JSON element which is inserted by the function into the input JSON. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element into the input JSON. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.1.0/#toobject-function", 
            "text": "This method returns the JSON object related to a given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string from which the function generates the JSON object. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.1.0/#tostring-function", 
            "text": "This method returns the JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object from which the function generates a JSON string. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.1.0/#tokenize-stream-processor", 
            "text": "This tokenizes the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream.  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#tokenizeasobject-stream-processor", 
            "text": "This tokenizes the given JSON based on the path provided and returns the response as an object.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that is tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON that the function tokenizes. \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path and the JSON. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/", 
            "text": "API Docs - v1.0.11\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the boolean value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getBool' function fetches theboolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetDouble \n(Function)\n\n\nThis method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getDouble' function fetches thedouble value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the double value of the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetFloat \n(Function)\n\n\nThis method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getFloat' function fetches thevalue.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetInt \n(Function)\n\n\nThis method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getInt' function fetches theinteger value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.\n\n\n\ngetLong \n(Function)\n\n\nThis returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON element from which the 'getLong' functionfetches the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.\n\n\n\ngetObject \n(Function)\n\n\nThis returns the object of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getObject' function fetches theobject.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetString \n(Function)\n\n\nThis returns the string value of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON input from which the 'getString' function fetches  the string value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\nisExists \n(Function)\n\n\nThis method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input in a given path, on which the function performs the search forJSON elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that contains the input JSON on which the function performs the search.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input into which is this function inserts the new value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path on the JSON input which is used to insert the given element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe JSON element which is inserted by the function into the input JSON.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element into the input JSON.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.\n\n\n\ntoObject \n(Function)\n\n\nThis method returns the JSON object related to a given JSON string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string from which the function generates the JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.\n\n\n\ntoString \n(Function)\n\n\nThis method returns the JSON string corresponding to a given JSON object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object from which the function generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis tokenizes the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis tokenizes the given JSON based on the path provided and returns the response as an object.\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that is tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON that the function tokenizes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path and the JSON.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#api-docs-v1011", 
            "text": "", 
            "title": "API Docs - v1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.11/#getbool-function", 
            "text": "This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the boolean value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getBool' function fetches theboolean value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.11/#getdouble-function", 
            "text": "This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getDouble' function fetches thedouble value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.11/#getfloat-function", 
            "text": "This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getFloat' function fetches thevalue. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.11/#getint-function", 
            "text": "This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getInt' function fetches theinteger value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.11/#getlong-function", 
            "text": "This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON element from which the 'getLong' functionfetches the long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.11/#getobject-function", 
            "text": "This returns the object of the JSON element present in the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getObject' function fetches theobject. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.11/#getstring-function", 
            "text": "This returns the string value of the JSON element present in the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON input from which the 'getString' function fetches  the string value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.11/#isexists-function", 
            "text": "This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input in a given path, on which the function performs the search forJSON elements. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that contains the input JSON on which the function performs the search. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.11/#setelement-function", 
            "text": "This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input into which is this function inserts the new value. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path on the JSON input which is used to insert the given element. \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The JSON element which is inserted by the function into the input JSON. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element into the input JSON. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.11/#toobject-function", 
            "text": "This method returns the JSON object related to a given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string from which the function generates the JSON object. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.11/#tostring-function", 
            "text": "This method returns the JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object from which the function generates a JSON string. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.11/#tokenize-stream-processor", 
            "text": "This tokenizes the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream.  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/#tokenizeasobject-stream-processor", 
            "text": "This tokenizes the given JSON based on the path provided and returns the response as an object.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that is tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON that the function tokenizes. \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path and the JSON. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/", 
            "text": "API Docs - v1.0.10\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the boolean value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getBool' function fetches theboolean value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetDouble \n(Function)\n\n\nThis method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getDouble' function fetches thedouble value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the double value of the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetFloat \n(Function)\n\n\nThis method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getFloat' function fetches thevalue.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.\n\n\n\ngetInt \n(Function)\n\n\nThis method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getInt' function fetches theinteger value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.\n\n\n\ngetLong \n(Function)\n\n\nThis returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON element from which the 'getLong' functionfetches the long value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.\n\n\n\ngetObject \n(Function)\n\n\nThis returns the object of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON from which the 'getObject' function fetches theobject.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\ngetString \n(Function)\n\n\nThis returns the string value of the JSON element present in the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input that holds the value in the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the JSON input from which the 'getString' function fetches  the string value.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.\n\n\n\nisExists \n(Function)\n\n\nThis method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input in a given path, on which the function performs the search forJSON elements.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that contains the input JSON on which the function performs the search.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe JSON input into which is this function inserts the new value.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path on the JSON input which is used to insert the given element.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe JSON element which is inserted by the function into the input JSON.\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element into the input JSON.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.\n\n\n\ntoObject \n(Function)\n\n\nThis method returns the JSON object related to a given JSON string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON string from which the function generates the JSON object.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.\n\n\n\ntoString \n(Function)\n\n\nThis method returns the JSON string corresponding to a given JSON object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid JSON object from which the function generates a JSON string.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis tokenizes the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream. \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis tokenizes the given JSON based on the path provided and returns the response as an object.\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that is tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path of the input JSON that the function tokenizes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe JSON element retrieved based on the given path and the JSON.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream.\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#api-docs-v1010", 
            "text": "", 
            "title": "API Docs - v1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.10/#getbool-function", 
            "text": "This method returns a 'boolean' value, either 'true' or 'false', based on the valuespecified against the JSON element present in the given path.In case there is no valid boolean value found in the given path, the method still returns 'false'.  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the boolean value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getBool' function fetches theboolean value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This returns the boolean value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.10/#getdouble-function", 
            "text": "This method returns the double value of the JSON element present in the given path. If there is no valid double value in the given path, the method returns 'null'.  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getDouble' function fetches thedouble value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This returns the double value of the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.10/#getfloat-function", 
            "text": "This method returns the float value of the JSON element present in the given path.If there is no valid float value in the given path, the method returns 'null'.  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getFloat' function fetches thevalue. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This returns the float value of the JSON input in the given path. The results aredirected to the 'OutputStream' stream.", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.10/#getint-function", 
            "text": "This method returns the integer value of the JSON element present in the given path. If there is no valid integer value in the given path, the method returns 'null'.  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getInt' function fetches theinteger value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This returns the integer value of the JSON input in the given path. The resultsare directed to the 'OutputStream' stream.", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.10/#getlong-function", 
            "text": "This returns the long value of the JSON element present in the given path. Ifthere is no valid long value in the given path, the method returns 'null'.  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON element from which the 'getLong' functionfetches the long value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This returns the long value of the JSON input in the given path. The results aredirected to 'OutputStream' stream.", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.10/#getobject-function", 
            "text": "This returns the object of the JSON element present in the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON from which the 'getObject' function fetches theobject. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This returns the object of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.10/#getstring-function", 
            "text": "This returns the string value of the JSON element present in the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input that holds the value in the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the JSON input from which the 'getString' function fetches  the string value. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This returns the string value of the JSON input in the given path. The results are directed to the 'OutputStream' stream.", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.10/#isexists-function", 
            "text": "This method checks whether there is a JSON element present in the given path or not.If there is a valid JSON element in the given path, it returns 'true'. If there is no valid JSON element, it returns 'false'  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input in a given path, on which the function performs the search forJSON elements. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that contains the input JSON on which the function performs the search. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This returns either true or false based on the existence of a JSON element in a given path. The results are directed to the 'OutputStream' stream.", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.10/#setelement-function", 
            "text": "This method allows to insert elements into a given JSON present in a specific path. If there is no valid path given, it returns the original JSON. Otherwise, it returns the new JSON.  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The JSON input into which is this function inserts the new value. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path on the JSON input which is used to insert the given element. \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The JSON element which is inserted by the function into the input JSON. \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element into the input JSON. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This returns the JSON object present in the given path with the newly inserted JSONelement. The results are directed to the 'OutputStream' stream.", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.10/#toobject-function", 
            "text": "This method returns the JSON object related to a given JSON string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON string from which the function generates the JSON object. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This returns the JSON object corresponding to the given JSON string.The results aredirected to the 'OutputStream' stream.", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.10/#tostring-function", 
            "text": "This method returns the JSON string corresponding to a given JSON object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid JSON object from which the function generates a JSON string. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This returns the JSON string corresponding to a given JSON object. The results are directed to the 'OutputStream' stream.", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.10/#tokenize-stream-processor", 
            "text": "This tokenizes the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream.  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/#tokenizeasobject-stream-processor", 
            "text": "This tokenizes the given JSON based on the path provided and returns the response as an object.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that is tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path of the input JSON that the function tokenizes. \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a JSON is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a JSON in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The JSON element retrieved based on the given path and the JSON. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given JSON using the path specified. If the specified path provides a JSON array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream. e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\" and \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/", 
            "text": "API Docs - v1.0.9\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis tokenizes the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis tokenizes the given json based on the path provided and returns the response as an object.\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json that should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path that is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nIf this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json.\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream\ne.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIf we use the configuration in the above example, it generates two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream \n\n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#api-docs-v109", 
            "text": "", 
            "title": "API Docs - v1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.9/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.9/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.9/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.9/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.9/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.9/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.9/#tokenize-stream-processor", 
            "text": "This tokenizes the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in that array by adding an additional attributes as the 'jsonElement' to the stream e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in this example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#tokenizeasobject-stream-processor", 
            "text": "This tokenizes the given json based on the path provided and returns the response as an object.  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json that should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path that is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         If this parameter is set to 'true' and a json is not provided in the given path, the event is dropped. If the parameter is set to 'false', the unavailability of a json in the specified path results in the event being created with a 'null' value for the json element. \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json. \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs a tokenization for the given json using the path specified. If the specified path provides a json array, it generates events for each element in the specified json array by adding an additional attribute as the 'jsonElement' into the stream e.g.,\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" If we use the configuration in the above example, it generates two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it adds the specified json element as an additional attribute named 'jsonElement' into the stream  \n e.g.,\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/", 
            "text": "API Docs - v1.0.8\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided and return the response as object\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.8/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.8/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.8/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.8/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.8/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.8/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.8/#tokenize-stream-processor", 
            "text": "This will tokenize the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#tokenizeasobject-stream-processor", 
            "text": "This will tokenize the given json according the path provided and return the response as object  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided and return the response as object\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.7/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.7/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.7/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.7/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.7/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.7/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.7/#tokenize-stream-processor", 
            "text": "This will tokenize the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#tokenizeasobject-stream-processor", 
            "text": "This will tokenize the given json according the path provided and return the response as object  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided and return the response as object\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.6/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.6/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.6/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.6/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.6/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.6/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.6/#tokenize-stream-processor", 
            "text": "This will tokenize the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/#tokenizeasobject-stream-processor", 
            "text": "This will tokenize the given json according the path provided and return the response as object  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided and return the response as object\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.5/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.5/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.5/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.5/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.5/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.5/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.5/#tokenize-stream-processor", 
            "text": "This will tokenize the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/#tokenizeasobject-stream-processor", 
            "text": "This will tokenize the given json according the path provided and return the response as object  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided and return the response as object\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.4/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.4/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.4/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.4/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.4/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.4/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.4/#tokenize-stream-processor", 
            "text": "This will tokenize the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.4/#tokenizeasobject-stream-processor", 
            "text": "This will tokenize the given json according the path provided and return the response as object  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nJson\n\n\ngetBool \n(Function)\n\n\nThis method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'\n\n\n\nSyntax\n\n\nBOOL\n json:getBool(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Boolean value to the given path\n\n\n\ngetDouble \n(Function)\n\n\nThis method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nDOUBLE\n json:getDouble(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding double value to the given path\n\n\n\ngetFloat \n(Function)\n\n\nThis method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nFLOAT\n json:getFloat(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Float value based on the given path\n\n\n\ngetInt \n(Function)\n\n\nThis method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nINT\n json:getInt(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding integer value based on the given path\n\n\n\ngetLong \n(Function)\n\n\nThis method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'\n\n\n\nSyntax\n\n\nLONG\n json:getLong(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding Long value based on the given path\n\n\n\ngetObject \n(Function)\n\n\nThis method will return the object of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nOBJECT\n json:getObject(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the object from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding object to the given path\n\n\n\ngetString \n(Function)\n\n\nThis method will return the string value of Json element corresponding to the given path.\n\n\n\nSyntax\n\n\nSTRING\n json:getString(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used get the value against the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to get the value from given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:getString(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding string value to the given path\n\n\n\nisExists \n(Function)\n\n\nThis method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false\n\n\n\nSyntax\n\n\nBOOL\n json:isExists(\nSTRING|OBJECT\n json, \nSTRING\n path)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to search the element with the given path\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to search in the given input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the true/false based existence of the given path\n\n\n\nsetElement \n(Function)\n\n\nThis method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json\n\n\n\nSyntax\n\n\nOBJECT\n json:setElement(\nSTRING|OBJECT\n json, \nSTRING\n path, \nSTRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT\n jsonelement, \nSTRING\n key)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe json input which is used to insert the given value\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \njsonelement\n\n        \nThe json element which is inserted into the given input json\n\n        \n\n        \nSTRING\nBOOL\nDOUBLE\nFLOAT\nINT\nLONG\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nkey\n\n        \nThe key which is used to insert the given element to the input json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json,\n$.name\n) as name\ninsert into OutputStream;\n\n\n\n\nThis will return the corresponding json object based on the given path and json element\n\n\n\ntoObject \n(Function)\n\n\nThis method will return the json object related to given json string.\n\n\n\nSyntax\n\n\nOBJECT\n json:toObject(\nSTRING\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json string which is used to generate the returned json object\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;\n\n\n\n\nThis will return the json object related to given json string\n\n\n\ntoString \n(Function)\n\n\nThis method will return the json string related to given json object.\n\n\n\nSyntax\n\n\nSTRING\n json:toString(\nOBJECT\n json)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nA valid json object which is used to generate the json string\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;\n\n\n\n\nThis will return a json string related to given json object\n\n\n\ntokenize \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided\n\n\n\nSyntax\n\n\njson:tokenize(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nSTRING\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"\n\n\n\n\ntokenizeAsObject \n(Stream Processor)\n\n\nThis will tokenize the given json according the path provided and return the response as object\n\n\n\nSyntax\n\n\njson:tokenizeAsObject(\nSTRING|OBJECT\n json, \nSTRING\n path, \nBOOL\n fail.on.missing.attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \njson\n\n        \nThe input json which should be tokenized using the given path.\n\n        \n\n        \nSTRING\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npath\n\n        \nThe path which is used to tokenize the given json\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \njsonElement\n\n        \nThe json element retrieved based on the given path and the json\n\n        \nOBJECT\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;\n\n\n\n\nThis query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream\nEg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\"\n\nIt we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\".\nIf the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream \n\n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#json", 
            "text": "", 
            "title": "Json"
        }, 
        {
            "location": "/api/1.0.3/#getbool-function", 
            "text": "This method will return the Boolean value of Json element corresponding to the given path. If there is no valid Boolean value at the given path, the method will return 'false'  Syntax  BOOL  json:getBool( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getBool(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Boolean value to the given path", 
            "title": "getBool (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getdouble-function", 
            "text": "This method will return the double value of Json element corresponding to the given path. If there is no valid Double value at the given path, the method will return 'null'  Syntax  DOUBLE  json:getDouble( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getDouble(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding double value to the given path", 
            "title": "getDouble (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getfloat-function", 
            "text": "This method will return the Float value of the Json element corresponding to the given path. If there is no valid Float value at the given path, the method will return 'null'  Syntax  FLOAT  json:getFloat( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getFloat(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Float value based on the given path", 
            "title": "getFloat (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getint-function", 
            "text": "This method will return the Integer value of Json element corresponding to the given path. If there is no valid Integer value at the given path, the method will return 'null'  Syntax  INT  json:getInt( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getInt(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding integer value based on the given path", 
            "title": "getInt (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getlong-function", 
            "text": "This method will return the Long value of the Json element corresponding to the given path. Ifthere is no valid Long value at the given path, the method will return 'null'  Syntax  LONG  json:getLong( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getLong(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding Long value based on the given path", 
            "title": "getLong (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getobject-function", 
            "text": "This method will return the object of Json element corresponding to the given path.  Syntax  OBJECT  json:getObject( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the object from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getObject(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding object to the given path", 
            "title": "getObject (Function)"
        }, 
        {
            "location": "/api/1.0.3/#getstring-function", 
            "text": "This method will return the string value of Json element corresponding to the given path.  Syntax  STRING  json:getString( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used get the value against the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to get the value from given json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:getString(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding string value to the given path", 
            "title": "getString (Function)"
        }, 
        {
            "location": "/api/1.0.3/#isexists-function", 
            "text": "This method allows to check whether there is any json element in the given path or not. If there is a valid json element in the given path, it will return true. If there is no valid json element, it will return false  Syntax  BOOL  json:isExists( STRING|OBJECT  json,  STRING  path)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to search the element with the given path \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to search in the given input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:isExists(json, $.name ) as name\ninsert into OutputStream;  This will return the true/false based existence of the given path", 
            "title": "isExists (Function)"
        }, 
        {
            "location": "/api/1.0.3/#setelement-function", 
            "text": "This method allows to insert elements to the given json based on the specified path. If there is no valid path given, it will return the original json. Otherwise it will return the new json  Syntax  OBJECT  json:setElement( STRING|OBJECT  json,  STRING  path,  STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT  jsonelement,  STRING  key)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The json input which is used to insert the given value \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n     \n     \n         jsonelement \n         The json element which is inserted into the given input json \n         \n         STRING BOOL DOUBLE FLOAT INT LONG OBJECT \n         No \n         No \n     \n     \n         key \n         The key which is used to insert the given element to the input json \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:setElement(json, $.name ) as name\ninsert into OutputStream;  This will return the corresponding json object based on the given path and json element", 
            "title": "setElement (Function)"
        }, 
        {
            "location": "/api/1.0.3/#toobject-function", 
            "text": "This method will return the json object related to given json string.  Syntax  OBJECT  json:toObject( STRING  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json string which is used to generate the returned json object \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom InputStream\nselect json:toJson(json) as jsonObject\ninsert into OutputStream;  This will return the json object related to given json string", 
            "title": "toObject (Function)"
        }, 
        {
            "location": "/api/1.0.3/#tostring-function", 
            "text": "This method will return the json string related to given json object.  Syntax  STRING  json:toString( OBJECT  json)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         A valid json object which is used to generate the json string \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputStream(json string);\nfrom IpStream\nselect json:toString(json) as jsonString\ninsert into OutputStream;  This will return a json string related to given json object", 
            "title": "toString (Function)"
        }, 
        {
            "location": "/api/1.0.3/#tokenize-stream-processor", 
            "text": "This will tokenize the given json according the path provided  Syntax  json:tokenize( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         STRING \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenize(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenize (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.3/#tokenizeasobject-stream-processor", 
            "text": "This will tokenize the given json according the path provided and return the response as object  Syntax  json:tokenizeAsObject( STRING|OBJECT  json,  STRING  path,  BOOL  fail.on.missing.attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         json \n         The input json which should be tokenized using the given path. \n         \n         STRING OBJECT \n         No \n         No \n     \n     \n         path \n         The path which is used to tokenize the given json \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This can either have value true or false. By default it will be true. If the specified path does not provide any json, it will return null. In this scenario users can drop or keep the event with 'null' value using this attribute. If this parameter is 'true', it will generate events with the 'null' value \n         true \n         BOOL \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         jsonElement \n         The json element retrieved based on the given path and the json \n         OBJECT \n       Examples  EXAMPLE 1  define stream InputStream (json string,path string);\n@info(name = 'query1')\nfrom InputStream#json:tokenizeAsObject(json, path)\nselect jsonElement\ninsert into OutputStream;  This query performs tokenization for the given json using the path specified. If the specified path provides json array, it will generate events for each elements in specified json array by adding additional attribute as the 'jsonElement' into the stream Eg:-\n jsonInput - {name:\"John\",enrolledSubjects:[\"Mathematics\",\"Physics\"]}, \n path - \"$.enrolledSubjects\" It we use configuration like above example, it will generate two events with the attributes \"Mathematics\", \"Physics\". If the specified path provides a single json element, it will add the specified json element as a additional attribute named 'jsonElement' into the stream  \n Eg:-\n jsonInput - {name:\"John\",age:25}, \n path - \"$.age\"", 
            "title": "tokenizeAsObject (Stream Processor)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2019 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}